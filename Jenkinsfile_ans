pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_credentials')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_credentials')
    }
        tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
        }

    stages {
        stage('Let`s Start') {
            steps {
                slackSend channel: '#jenkins-slack-test', message: 'Posla zhara'
            }            
        }
    
    
    
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                    credentialsId: 'git-hub_ssh-key',
                    url: 'git@github.com:Jennysiq/MyInfrastucture.git'
                    ]]
                ])
            }
        }
        
        stage('Notification Terraform Init') {
            steps {
                slackSend channel: '#jenkins-slack-test', message: 'Init TF project'
            }            
        }

        stage('Init') {
            steps {
                sh 'terraform init -input=false'
  //             sh '''terraform init
  //              if [ $action = ‘plan’ ]; then
  //              terraform plan > plan.out
  //              elif [ $action = ‘apply’ ]; then
  //              terraform apply — auto-approve
  //              elif [ $action = ‘destroy’ ]; then
  //              terraform destroy — auto-approve
  //             fi'''
            }
        }
                
        
        stage('Notification Terraform Plan') {
            steps {
                slackSend channel: '#jenkins-slack-test', message: 'Plan TF project'
            }            
        }
 
        stage('Plan') {
            steps {
                sh "pwd;terraform plan -input=false -out tfplan"
                sh "pwd;terraform show -no-color tfplan > tfplan.txt"
            }
        }
        
        stage('Notification Terraform Approve') {
            steps {
                slackSend channel: '#jenkins-slack-test', message: 'Approve TF project'
            }            
        }

        stage('Approv') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
               }
           }
       }

        stage('Apply Terraform') {
            steps {
                sh "pwd; terraform apply -input=false tfplan"
            }
        }
//      stage('S3Copy step') {
//          steps {
//          s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 'my.bucket.for.upload.jenkins47', excludedFile: 'Jenkinsfile', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'us-east-1', showDirectlyInBrowser: false, sourceFile: '*/', storageClass: 'STANDARD', uploadFromSlave: true, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'Jenkins', userMetadata: [] 
//          }
//      }

        stage('Notification Finish SLACK') {
            steps {
                slackSend channel: '#jenkins-slack-test', message: 'Second Work is starting RIGHT NOW!'
            }
        }
    }
}
